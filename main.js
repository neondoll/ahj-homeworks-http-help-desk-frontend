!function(){"use strict";class t{constructor(t){this._baseURL=t}get(e){return t.fetch(this._baseURL+e,{method:"GET"})}post(e,i=new FormData){return t.fetch(this._baseURL+e,{method:"POST",body:i})}static async fetch(t,e){try{const i=await fetch(t,e);if(i.ok)return 204===i.status?{status:i.status}:await i.json();console.error("Ошибка:",await i.json())}catch(t){console.error(t)}}}class e extends t{constructor(){super(Object.create(globalThis.import_meta_env||null).BACKEND_URL||"http://localhost:7070")}allTickets(){return this.get("/?method=allTickets")}createTicket(t){return this.post("/?method=createTicket",t)}deleteById(t){return this.get(`/?method=deleteById&id=${t}`)}ticketById(t){return this.get(`/?method=ticketById&id=${t}`)}updateById(t,e){return this.post(`/?method=updateById&id=${t}`,e)}}class i{constructor(){this._allTickets=[],this._container=void 0,this._element=void 0,this._list=void 0,this._modal=void 0,this._modalForm=void 0,this._modalTicket=void 0,this._modalTicketId=void 0,this._modalType=void 0,this._service=new e,this.onClickBtnAdd=this.onClickBtnAdd.bind(this),this.onClickList=this.onClickList.bind(this),this.onClickModal=this.onClickModal.bind(this),this.onResetModalForm=this.onResetModalForm.bind(this),this.onSubmitModalForm=this.onSubmitModalForm.bind(this)}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this._container=t}checkBinding(){if(void 0===this._container)throw new Error("HelpDesk not bind to DOM")}createModal(){document.body.insertAdjacentHTML("beforeend",i.markupModal(this._modalType,this._modalTicket)),this._modal=document.body.querySelector(i.modalSelector),this._modalForm=this._modal.querySelector(i.modalFormSelector),this._modal.addEventListener("click",this.onClickModal),this._modalForm.addEventListener("reset",this.onResetModalForm),this._modalForm.addEventListener("submit",this.onSubmitModalForm)}deleteModal(){this._modalForm.removeEventListener("submit",this.onSubmitModalForm),this._modalForm.removeEventListener("reset",this.onResetModalForm),this._modal.removeEventListener("click",this.onClickModal),this._modal.remove(),this._modalTicketId=void 0,this._modalTicket=void 0,this._modalType=void 0,this._modalForm=void 0,this._modal=void 0}drawUI(){this.checkBinding(),this._container.innerHTML=i.markup,this._element=this._container.querySelector(i.selector),this._list=this._element.querySelector(i.listSelector),this._element.querySelector(i.btnAddSelector).addEventListener("click",this.onClickBtnAdd),this._list.addEventListener("click",this.onClickList),this._service.allTickets().then((t=>{void 0!==t&&(this._allTickets=t,this.redrawDOM())}))}onClickBtnAdd(){this._modalTicketId=void 0,this._modalTicket=void 0,this._modalType="add",this.createModal()}onClickList(t){t.target.closest(i.ticketStatusSelector)?this.onClickTicketStatus(t):t.target.closest(i.ticketBtnEditSelector)?this.onClickTicketBtnEdit(t):t.target.closest(i.ticketBtnDeleteSelector)?this.onClickTicketBtnDelete(t):t.target.closest(i.ticketContentSelector)&&this.onClickTicketContent(t)}onClickModal(t){t.target.closest(i.modalFormSelector)||this.deleteModal()}onClickTicketBtnDelete(t){this._modalTicketId=t.target.closest(i.ticketSelector).dataset.id,this._modalTicket=this._allTickets.find((t=>t.id===this._modalTicketId)),this._modalType="delete",this.createModal()}onClickTicketBtnEdit(t){this._modalTicketId=t.target.closest(i.ticketSelector).dataset.id,this._modalTicket=this._allTickets.find((t=>t.id===this._modalTicketId)),this._modalType="edit",this.createModal()}onClickTicketContent(t){t.target.closest(i.ticketSelector).classList.toggle("help-desk-ticket--show-description")}onClickTicketStatus(t){const e=t.target.closest(i.ticketSelector).dataset.id,s=this._allTickets.findIndex((t=>t.id===e)),d=this._allTickets[s],l=new FormData;l.append("id",d.id),l.append("name",d.name),l.append("status",JSON.stringify(!d.status)),l.append("description",d.description),this._service.updateById(e,l).then((t=>{void 0!==t&&this._service.ticketById(t.id).then((t=>{this._allTickets[s]=t,this.redrawDOM()}))}))}onResetModalForm(){this.deleteModal()}onSubmitModalForm(t){t.preventDefault();const e=new FormData(t.target);switch(e.append("id",this._modalTicket?this._modalTicket.id:null),e.append("status",JSON.stringify(!!this._modalTicket&&this._modalTicket.status)),this._modalType){case"add":this._service.createTicket(e).then((t=>{void 0!==t&&(this.deleteModal(),this._service.ticketById(t.id).then((t=>{this._allTickets.push(t),this.redrawDOM()})))}));break;case"edit":this._service.updateById(this._modalTicketId,e).then((t=>{if(void 0!==t){const e=this._allTickets.findIndex((t=>t.id===this._modalTicketId));this.deleteModal(),this._service.ticketById(t.id).then((t=>{this._allTickets[e]=t,this.redrawDOM()}))}}));break;case"delete":this._service.deleteById(this._modalTicketId).then((t=>{void 0!==t&&(this.deleteModal(),this._service.allTickets().then((t=>{this._allTickets=t,this.redrawDOM()})))}))}}redrawDOM(){this._list.innerHTML="",this._allTickets.forEach((t=>{this._list.insertAdjacentHTML("beforeend",i.markupTicket(t))}))}static get markup(){return'\n      <div class="help-desk">\n        <div class="help-desk__header">\n          <button class="help-desk__btn-add" type="button">Добавить тикет</button>\n        </div>\n        <ul class="help-desk__list">\n          <li class="help-desk__item-loading">Загрузка...</li>\n        </ul>\n      </div>\n    '}static markupModal(t,e){return`\n      <div class="help-desk-modal">\n        <form class="help-desk-modal__form">\n          <h2 class="help-desk-modal__title">${"add"===t?"Добавить тикет":"edit"===t?"Изменить тикет":"delete"===t?"Удалить тикет":void 0}</h2>\n          ${"delete"===t?'<p class="help-desk-modal__description">Вы уверены, что хотите удалить тикет? Это действие необратимо.</p>':`\n        <div class="help-desk-modal__form-group">\n          <label class="help-desk-modal__label" for="form-name">Краткое описание</label>\n          <input class="help-desk-modal__input" id="form-name" name="name" value="${"edit"===t?e.name:""}">\n        </div>\n        <div class="help-desk-modal__form-group">\n          <label class="help-desk-modal__label" for="form-description">Подробное описание</label>\n          <textarea class="help-desk-modal__textarea" id="form-description" name="description" rows="3">${"edit"===t?e.description:""}</textarea>\n        </div>\n      `}\n          <div class="help-desk-modal__controls">\n            <button class="help-desk-modal__btn-reset" type="reset">Отмена</button>\n            <button class="help-desk-modal__btn-submit" type="submit">Ok</button>\n          </div>\n        </form>\n      </div>\n    `}static markupTicket(t){const e=new Date(t.created),i=e.getFullYear(),s=String(e.getMonth()+1).padStart(2,"0"),d=String(e.getDate()).padStart(2,"0"),l=String(e.getHours()).padStart(2,"0"),o=String(e.getMinutes()).padStart(2,"0"),a=String(e.getSeconds()).padStart(2,"0"),n=`${i}-${s}-${d}T${l}:${o}:${a}`,c=`${d}.${s}.${i} ${l}:${o}:${a}`;return`\n      <li class="help-desk__item help-desk-ticket" data-id="${t.id}">\n        <span class="help-desk-ticket__content">\n          <span class="help-desk-ticket__left">\n            <button class="help-desk-ticket__status" type="button">${t.status?"&#10004;":""}</button>\n            <span class="help-desk-ticket__name">${t.name}</span>\n          </span>\n          <span class="help-desk-ticket__right">\n            <time class="help-desk-ticket__created" datetime="${n}">${c}</time>\n            <span class="help-desk-ticket__controls">\n              <button class="help-desk-ticket__btn-edit" type="button">✎</button>\n              <button class="help-desk-ticket__btn-delete" type="button">&#10006;</button>\n            </span>\n          </span>\n        </span>\n        <span class="help-desk-ticket__description">${t.description||"<i>(Нет данных)</i>"}</span>\n      </li>\n    `}static get btnAddSelector(){return".help-desk__btn-add"}static get listSelector(){return".help-desk__list"}static get modalSelector(){return".help-desk-modal"}static get modalFormSelector(){return".help-desk-modal__form"}static get selector(){return".help-desk"}static get ticketBtnDeleteSelector(){return".help-desk-ticket__btn-delete"}static get ticketBtnEditSelector(){return".help-desk-ticket__btn-edit"}static get ticketContentSelector(){return".help-desk-ticket__content"}static get ticketSelector(){return".help-desk-ticket"}static get ticketStatusSelector(){return".help-desk-ticket__status"}}document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector("#app"),e=new i;e.bindToDOM(t),e.drawUI()}))}();